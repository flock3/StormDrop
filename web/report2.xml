<get_reports_response status_text="OK" status="200"><report id="6fdfb6d9-4d25-44f7-8c00-80e8bf1746be" format_id="910200ca-dc05-11e1-954f-406186ea4fc5" extension="xml" type="scan" content_type="text/xml"><?xml version="1.0"?>
<asset-report-collection xmlns="http://scap.nist.gov/schema/asset-reporting-format/1.1" xmlns:openvas="http://openvas.org" xmlns:ai="http://scap.nist.gov/schema/asset-identification/1.1" xmlns:core="http://scap.nist.gov/schema/reporting-core/1.1" xmlns:cpe-name="http://cpe.mitre.org/naming/2.0" xmlns:arf="http://scap.nist.gov/specifications/arf/index.html">
  <core:relationships xmlns:arfvocab="http://scap.nist.gov/vocabulary/arf/relationships/1.0#">
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.5">
      <core:ref>h_192.168.1.5</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.5">
      <core:ref>a_h_192.168.1.5_1</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.5">
      <core:ref>a_h_192.168.1.5_2</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.64">
      <core:ref>h_192.168.1.64</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.77">
      <core:ref>h_192.168.1.77</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.78">
      <core:ref>h_192.168.1.78</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.228">
      <core:ref>h_192.168.1.228</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.254">
      <core:ref>h_192.168.1.254</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.254">
      <core:ref>a_h_192.168.1.254_1</core:ref>
    </core:relationship>
    <core:relationship type="arfvocab:isAbout" subject="report_192.168.1.254">
      <core:ref>a_h_192.168.1.254_2</core:ref>
    </core:relationship>
  </core:relationships>
  <assets>
    <asset id="h_192.168.1.5">
      <ai:computing-device>
        <hostname>Unknown-b8-27-eb-ba-fd-8a.home</hostname>
        <ai:connections>
          <ai:connection>
            <ai:ip-address>
              <ai:ip-v4>192.168.1.5</ai:ip-v4>
            </ai:ip-address>
          </ai:connection>
        </ai:connections>
      </ai:computing-device>
    </asset>
    <asset id="a_h_192.168.1.5_1">
      <ai:software>
        <cpe>cpe:/a:samba:samba:3.6.6</cpe>
      </ai:software>
    </asset>
    <asset id="a_h_192.168.1.5_2">
      <ai:software>
        <cpe>cpe:/a:openbsd:openssh:6.0p1</cpe>
      </ai:software>
    </asset>
    <asset id="os_h_192.168.1.5_1">
      <ai:software>
        <cpe>cpe:/o:debian:debian_linux</cpe>
      </ai:software>
    </asset>
    <asset id="h_192.168.1.64">
      <ai:computing-device>
        <ai:connections>
          <ai:connection>
            <ai:ip-address>
              <ai:ip-v4>192.168.1.64</ai:ip-v4>
            </ai:ip-address>
          </ai:connection>
        </ai:connections>
      </ai:computing-device>
    </asset>
    <asset id="h_192.168.1.77">
      <ai:computing-device>
        <ai:connections>
          <ai:connection>
            <ai:ip-address>
              <ai:ip-v4>192.168.1.77</ai:ip-v4>
            </ai:ip-address>
          </ai:connection>
        </ai:connections>
      </ai:computing-device>
    </asset>
    <asset id="h_192.168.1.78">
      <ai:computing-device>
        <hostname>SonosZP.home</hostname>
        <ai:connections>
          <ai:connection>
            <ai:ip-address>
              <ai:ip-v4>192.168.1.78</ai:ip-v4>
            </ai:ip-address>
          </ai:connection>
        </ai:connections>
      </ai:computing-device>
    </asset>
    <asset id="h_192.168.1.228">
      <ai:computing-device>
        <ai:connections>
          <ai:connection>
            <ai:ip-address>
              <ai:ip-v4>192.168.1.228</ai:ip-v4>
            </ai:ip-address>
          </ai:connection>
        </ai:connections>
      </ai:computing-device>
    </asset>
    <asset id="h_192.168.1.254">
      <ai:computing-device>
        <hostname>BThomehub.home</hostname>
        <ai:connections>
          <ai:connection>
            <ai:ip-address>
              <ai:ip-v4>192.168.1.254</ai:ip-v4>
            </ai:ip-address>
          </ai:connection>
        </ai:connections>
      </ai:computing-device>
    </asset>
    <asset id="a_h_192.168.1.254_1">
      <ai:software>
        <cpe>cpe:/a:samba:samba:3.0.28</cpe>
      </ai:software>
    </asset>
    <asset id="a_h_192.168.1.254_2">
      <ai:software>
        <cpe>cpe:/a:openbsd:openssh:4.2</cpe>
      </ai:software>
    </asset>
    <asset id="os_h_192.168.1.254_6">
      <ai:software>
        <cpe>cpe:/o:linux:kernel</cpe>
      </ai:software>
    </asset>
  </assets>
  <reports>
    <report id="report_192.168.1.5">
      <content>
        <host xmlns="">
          <result id="027a7449-a6e7-4001-be35-b8f0ec2016ef">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103239">
              <name>SSH Brute Force Logins with default Credentials</name>
              <family>Default Accounts</family>
              <cvss_base>9.0</cvss_base>
              <risk_factor>Critical</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:C/I:P/A:P|solution=Change the password as soon as possible.|summary=It was possible to login into the remote host using default credentials.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>High</threat>
            <description>
 Summary:
 It was possible to login into the remote host using default credentials.

 Solution:
 Change the password as soon as possible.

It was possible to login with the following credentials &lt;User&gt;:&lt;Password&gt;

root:password

</description>
          </result>
          <result id="60a7d9db-3511-4dff-b3a7-8e01d7156f89">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80091">
              <name>TCP timestamps</name>
              <family>General</family>
              <cvss_base>2.6</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:H/Au:N/C:P/I:N/A:N|summary=The remote host implements TCP timestamps and therefore allows to compute
the uptime.|vuldetect=Special IP packets are forged and sent with a little delay in between to the
target IP. The responses are searched for a timestamps. If found, the
timestamps are reported.|solution=To disable TCP timestamps on linux add the line 'net.ipv4.tcp_timestamps = 0' to
/etc/sysctl.conf. Execute 'sysctl -p' to apply the settings at runtime.

To disable TCP timestamps on Windows execute 'netsh int tcp set global timestamps=disabled'

Starting with Windows Server 2008 and Vista, the timestamp can not be completely disabled.

The default behavior of the TCP/IP stack on this Systems is, to not use the 
Timestamp options when initiating TCP connections, but use them if the TCP peer 
that is initiating communication includes them in their synchronize (SYN) segment.

See also: http://www.microsoft.com/en-us/download/details.aspx?id=9152|affected=TCP/IPv4 implementations that implement RFC1323.|insight=The remote host implements TCP timestamps, as defined by RFC1323.|impact=A side effect of this feature is that the uptime of the remote
host can sometimes be computed.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc1323.txt</xref>
            </nvt>
            <threat>Medium</threat>
            <description>It was detected that the host implements RFC1323.

The following timestamps were retrieved with a delay of 1 seconds in-between:
Paket 1: 9675676
Paket 2: 9675809


</description>
          </result>
          <result id="bc836c71-d662-4fda-9081-975a5a30e02f">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/SMBClient</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.90011">
              <name>SMB Test</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Test remote host SMB Functions</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>OS Version = UNIX
Domain = WORKGROUP
SMB Serverversion = SAMBA 3.6.6

</description>
          </result>
          <result id="0501089b-0d12-4dd1-82e6-f014659002a8">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/SMBClient</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.90011">
              <name>SMB Test</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Test remote host SMB Functions</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>OS Version = UNIX
Domain = WORKGROUP
SMB Serverversion = Samba 3.6.6

</description>
          </result>
          <result id="46e02d68-373f-46b5-b156-8590bf1502ed">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>ntp (123/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10884">
              <name>NTP read variables</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=A NTP (Network Time Protocol) server is listening on this port.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>
  Summary:
  A NTP (Network Time Protocol) server is listening on this port.
</description>
          </result>
          <result id="61637471-ec0e-44a5-802f-4123c77993bf">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/CPE-T</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.810002">
              <name>CPE Inventory</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=CPE Inventory

This NVT uses information present in the Knowledge Base (KB) to
determine CPE identities (http://cpe.mitre.org/) of operating
systems, services and applications detected during the scan.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>192.168.1.5|cpe:/a:samba:samba:3.6.6
192.168.1.5|cpe:/a:openbsd:openssh:6.0p1
192.168.1.5|cpe:/o:debian:debian_linux

</description>
          </result>
          <result id="2be2a453-8345-491f-8d27-0b85a2be8a51">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/HOST-T</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.810003">
              <name>Host Summary</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This NVT summarizes technical information about the scanned host
collected during the scan.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>traceroute:192.168.1.228,192.168.1.5
TCP ports:445,22,139
UDP ports:

</description>
          </result>
          <result id="938aa02f-0c10-4dcc-8729-c3ef0463220e">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/icmp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103190">
              <name>ICMP Timestamp Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>CVE-1999-0524</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:L/AC:L/Au:N/C:N/I:N/A:N|summary=The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc0792.txt</xref>
            </nvt>
            <threat>Log</threat>
            <description>
 Summary:
 The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.
</description>
          </result>
          <result id="dd5b5b82-59e4-4f74-87ee-960d8b89978a">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103978">
              <name>Checks for open udp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open UDP ports of the UDP ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open UDP ports: [None found]
</description>
          </result>
          <result id="3b789490-9f4a-480a-8a14-f21e7382e166">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.51662">
              <name>Traceroute</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Block unwanted packets from escaping your network.|summary=A traceroute from the scanning server to the target system was
conducted. This traceroute is provided primarily for informational
value only. In the vast majority of cases, it does not represent a
vulnerability. However, if the displayed traceroute contains any
private addresses that should not have been publicly visible, then you
have an issue you need to correct.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Here is the route from 192.168.1.228 to 192.168.1.5:

192.168.1.228
192.168.1.5

</description>
          </result>
          <result id="fdffa74f-b023-413a-8395-0f056d6f9086">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.802726">
              <name>Microsoft SMB Signing Disabled</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Checking for SMB signing is disabled.

The script logs in via smb, checks the SMB Negotiate Protocol response to
confirm SMB signing is disabled.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>SMB signing is disabled on this host
</description>
          </result>
          <result id="f62e5e52-a5e8-4fd5-b1fe-339c45942482">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.900239">
              <name>Checks for open tcp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open tcp ports of the
tcp ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open TCP ports: 445, 22, 139
</description>
          </result>
          <result id="439e339b-659b-40b6-87d3-77086046d46b">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="9c702a4b-5ac4-4e54-ab14-f645e1fb97b4">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10394">
              <name>SMB log in</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script attempts to logon into the remote host using 
 login/password credentials.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>It was possible to log into the remote host using the SMB protocol.

</description>
          </result>
          <result id="da9048ad-57a8-42bb-a0e8-5dd5205f61a5">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.11011">
              <name>SMB on port 445</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script detects wether port 445 and 139 are open and
if thet are running SMB servers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A CIFS server is running on this port
</description>
          </result>
          <result id="5256e8fd-1606-437e-932e-8e33144902ac">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>netbios-ns (137/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10150">
              <name>Using NetBIOS to retrieve information from a Windows host</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Block those ports from outside communication|summary=The NetBIOS port is open (UDP:137). A remote attacker may use this to gain
access to sensitive information such as computer name, workgroup/domain
name, currently logged on user name, etc.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The following 7 NetBIOS names have been gathered :
 NAS             = This is the computer name registered for workstation services by a WINS client.
 NAS             = This is the current logged in user registered for this workstation.
 NAS             = Computer name
   __MSBROWSE__ 
 WORKGROUP      
 WORKGROUP       = Workgroup / Domain name (part of the Browser elections)
 WORKGROUP       = Workgroup / Domain name

. This SMB server seems to be a SAMBA server (this is not a security
risk, this is for your information). This can be told because this server 
claims to have a null MAC address

If you do not want to allow everyone to find the NetBios name
of your computer, you should filter incoming traffic to this port.
</description>
          </result>
          <result id="e91cff9f-8138-4330-8437-27afd50d549a">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>netbios-ssn (139/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="ac47de19-32f7-41cf-bf6c-60181fdb5cc2">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>netbios-ssn (139/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.11011">
              <name>SMB on port 445</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script detects wether port 445 and 139 are open and
if thet are running SMB servers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>An SMB server is running on this port
</description>
          </result>
          <result id="4c458b7d-7071-4be2-8a5d-1d60fda169b3">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="d20fc6ab-eebd-4e32-83a3-2c63fbb56ce8">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.100259">
              <name>SSH Protocol Versions Supported</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Identification of SSH protocol versions supported by the remote
SSH Server. Also reads the corresponding fingerprints from the service.

The following versions are tried: 1.33, 1.5, 1.99 and 2.0</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The remote SSH Server supports the following SSH Protocol Versions:
1.99
2.0

</description>
          </result>
          <result id="4af37cc2-fc51-4c03-8c21-ceeac20eaa34">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10267">
              <name>SSH Server type and version</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=This detects the SSH Server's type and version by connecting to the server
and processing the buffer received.
This information gives potential attackers additional information about the
system they are attacking. Versions and Types should be omitted
where possible.|solution=Apply filtering to disallow access to this port from untrusted hosts</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Detected SSH server version: SSH-2.0-OpenSSH_6.0p1 Debian-4
Remote SSH supported authentication: password,publickey 
Remote SSH banner: 
(not available)

CPE: cpe:/a:openbsd:openssh:6.0p1

Concluded from remote connection attempt with credentials:
  Login: OpenVAS
  Password: OpenVAS

</description>
          </result>
          <result id="4afa0c5c-f6fe-4a3b-8664-a8946c118b50">
            <subnet>192.168.1.5</subnet>
            <host>192.168.1.5</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>An ssh server is running on this port
</description>
          </result>
        </host>
      </content>
    </report>
    <report id="report_192.168.1.64">
      <content>
        <host xmlns="">
          <result id="bafe42f1-21c0-4d2e-a538-659de93f13d6">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80091">
              <name>TCP timestamps</name>
              <family>General</family>
              <cvss_base>2.6</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:H/Au:N/C:P/I:N/A:N|summary=The remote host implements TCP timestamps and therefore allows to compute
the uptime.|vuldetect=Special IP packets are forged and sent with a little delay in between to the
target IP. The responses are searched for a timestamps. If found, the
timestamps are reported.|solution=To disable TCP timestamps on linux add the line 'net.ipv4.tcp_timestamps = 0' to
/etc/sysctl.conf. Execute 'sysctl -p' to apply the settings at runtime.

To disable TCP timestamps on Windows execute 'netsh int tcp set global timestamps=disabled'

Starting with Windows Server 2008 and Vista, the timestamp can not be completely disabled.

The default behavior of the TCP/IP stack on this Systems is, to not use the 
Timestamp options when initiating TCP connections, but use them if the TCP peer 
that is initiating communication includes them in their synchronize (SYN) segment.

See also: http://www.microsoft.com/en-us/download/details.aspx?id=9152|affected=TCP/IPv4 implementations that implement RFC1323.|insight=The remote host implements TCP timestamps, as defined by RFC1323.|impact=A side effect of this feature is that the uptime of the remote
host can sometimes be computed.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc1323.txt</xref>
            </nvt>
            <threat>Medium</threat>
            <description>It was detected that the host implements RFC1323.

The following timestamps were retrieved with a delay of 1 seconds in-between:
Paket 1: 1106360581
Paket 2: 1106362154


</description>
          </result>
          <result id="55febd0e-e17a-4de9-b91a-7c46b2981bdd">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.100587">
              <name>OpenSSL 'ssl3_get_record()' Remote Denial of Service Vulnerability</name>
              <family>Denial of Service</family>
              <cvss_base>5.0</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>CVE-2010-0740</cve>
              <bid>39013</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:P|solution=Updates are available. Please see the references for more information.|summary=OpenSSL is prone to a denial-of-service vulnerability caused
by a NULL-pointer dereference.

According to its banner, OpenVAS has discovered that the remote
Webserver is using a version prior to OpenSSL 0.9.8n which is vulnerable.

An attacker can exploit this issue to crash the affected application,
denying service to legitimate users.

OpenSSL versions 0.9.8f through 0.9.8m are vulnerable.</tags>
              <cert>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2011-0185"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0730"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0708"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0707"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0562"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0549"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0539"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0499"/>
              </cert>
              <xref>URL:http://www.securityfocus.com/bid/39013, URL:http://www.openbsd.org/errata45.html, URL:http://www.openbsd.org/errata46.html, URL:http://www.openbsd.org/errata47.html, URL:http://www.openssl.org, URL:http://www.securityfocus.com/archive/1/510726, URL:http://openssl.org/news/secadv_20100324.txt</xref>
            </nvt>
            <threat>Medium</threat>
            <description>
 Summary:
 OpenSSL is prone to a denial-of-service vulnerability caused
by a NULL-pointer dereference.

According to its banner, OpenVAS has discovered that the remote
Webserver is using a version prior to OpenSSL 0.9.8n which is vulnerable.

An attacker can exploit this issue to crash the affected application,
denying service to legitimate users.

OpenSSL versions 0.9.8f through 0.9.8m are vulnerable.
 Solution:
 Updates are available. Please see the references for more information.
</description>
          </result>
          <result id="6dd132c1-9633-404c-bccf-a8b60c2d9a0a">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.100588">
              <name>OpenSSL 'dtls1_retrieve_buffered_fragment()' Remote Denial of Service Vulnerability</name>
              <family>Denial of Service</family>
              <cvss_base>4.3</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>CVE-2010-0433</cve>
              <bid>38533</bid>
              <tags>cvss_base_vector=AV:N/AC:M/Au:N/C:N/I:N/A:P|solution=Updates are available. Please see the references for more information.|summary=OpenSSL is prone to a denial-of-service vulnerability caused
by a NULL-pointer dereference.

According to its banner, OpenVAS has discovered that the remote Webserver is
using a version prior to OpenSSL 0.9.8n which is vulnerable.

An attacker can exploit this issue to crash the affected application,
denying service to legitimate users.

OpenSSL versions 0.9.8m and prior are vulnerable.</tags>
              <cert>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2011-0185"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-1293"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0730"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0708"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0707"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0562"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0558"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0539"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0499"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0405"/>
              </cert>
              <xref>URL:http://www.securityfocus.com/bid/38533, URL:https://bugzilla.redhat.com/show_bug.cgi?id=567711, URL:https://bugzilla.redhat.com/show_bug.cgi?id=569774, URL:http://www.openwall.com/lists/oss-security/2010/03/03/5, URL:http://cvs.openssl.org/chngview?cn=19374, URL:http://www.openssl.org, URL:http://www.securityfocus.com/archive/1/510726</xref>
            </nvt>
            <threat>Medium</threat>
            <description>
 Summary:
 OpenSSL is prone to a denial-of-service vulnerability caused
by a NULL-pointer dereference.

According to its banner, OpenVAS has discovered that the remote Webserver is
using a version prior to OpenSSL 0.9.8n which is vulnerable.

An attacker can exploit this issue to crash the affected application,
denying service to legitimate users.

OpenSSL versions 0.9.8m and prior are vulnerable.
 Solution:
 Updates are available. Please see the references for more information.
</description>
          </result>
          <result id="56d4cacc-6fc3-4494-9a7d-ddb6ae8a3991">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>mysql (3306/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.17975">
              <name>Identify unknown services with GET</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin performs service detection.

Description :

This plugin is a complement of find_service.nasl. It sends a GET
request to the remaining unknown services and tries to identify 
them.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>A MySQL server seems to be running on this port but it
rejects connection from the openvas scanner.
</description>
          </result>
          <result id="c6bf5b02-f5b3-486c-8f5a-e1f60021972e">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>ntp (123/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10884">
              <name>NTP read variables</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=A NTP (Network Time Protocol) server is listening on this port.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>
  Summary:
  A NTP (Network Time Protocol) server is listening on this port.
</description>
          </result>
          <result id="89eb40f9-1d6c-40d1-bfd1-fddca497a00b">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>afpovertcp (548/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="c9750483-7e07-490f-8906-14bc919f0ae2">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>csms2 (3400/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="2fd4cbb7-47c7-42e5-a564-a4bd6d17f425">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>general/SMBClient</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.90011">
              <name>SMB Test</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Test remote host SMB Functions</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Error getting SMB-Data -&gt; SESSION SETUP FAILED: NT_STATUS_ACCOUNT_RESTRICTION
</description>
          </result>
          <result id="e4d876fd-6fe5-40f1-ae13-adab9f9d9386">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103978">
              <name>Checks for open udp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open UDP ports of the UDP ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open UDP ports: [None found]
</description>
          </result>
          <result id="5afdd3b5-0b66-4864-b2c0-959a3059d1d5">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.14260">
              <name>Nikto (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses nikto(1) to find weak CGI scripts
and other known issues regarding web server security.
See the preferences section for configuration options.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nikto could not be found in your system path.
OpenVAS was unable to execute Nikto and to perform the scan you
requested.
Please make sure that Nikto is installed and that nikto.pl or nikto is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="617f8807-1c90-4c8d-818d-56208ec5b4a8">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.900239">
              <name>Checks for open tcp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open tcp ports of the
tcp ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open TCP ports: 548, 3400, 445, 3306, 80
</description>
          </result>
          <result id="1f02a3c9-f273-45f7-bbc2-8f3ffedf01e7">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="1e815c6c-52dd-4a2e-ac47-4269761b0153">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10107">
              <name>HTTP Server type and version</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Configure your server to use an alternate name like
    'Wintendo httpD w/Dotmatrix display'
Be sure to remove common logos like apache_pb.gif.
With Apache, you can set the directive 'ServerTokens Prod' to limit
the information emanating from the server in its response headers.|summary=This detects the HTTP Server's type and version.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The remote web server type is :

Apache/2.2.24 (Unix) DAV/2 PHP/5.5.5 mod_ssl/2.2.24 OpenSSL/0.9.8y 


Solution : You can set the directive 'ServerTokens Prod' to limit
the information emanating from the server in its response headers.
</description>
          </result>
          <result id="df9c8f60-664f-4af3-a0f0-610f92e3033e">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A web server is running on this port
</description>
          </result>
          <result id="6551bbba-de1d-47ea-b89d-307f4134b4b7">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.11032">
              <name>Directory Scanner</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to determine the presence of various
common dirs on the remote web server</tags>
              <cert/>
              <xref>OWASP:OWASP-CM-006</xref>
            </nvt>
            <threat>Log</threat>
            <description>The following directories were discovered:
/cgi-bin, /config, /test, /icons, /manual

While this is not, in and of itself, a bug, you should manually inspect 
these directories to ensure that they are in compliance with company
security standards

</description>
          </result>
          <result id="78148b46-22d7-4315-ac1c-388b6dc65759">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.800109">
              <name>PHP Version Detection</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=Detection of installed version of PHP.

This script sends HTTP GET request and try to get the version from the
responce, and sets the result in KB.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Detected PHP version: 5.5.5
Location: tcp/80
CPE: cpe:/a:php:php:5.5.5

Concluded from version identification result:
Server: Apache/2.2.24 (Unix) DAV/2 PHP/5.5.5 mod_ssl/2.2.24 OpenSSL/0.9.8y 


</description>
          </result>
          <result id="bb292fea-cfcb-4828-aea7-47765610ee46">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.900498">
              <name>Apache Web ServerVersion Detection</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Detection of installed version of Apache Web Server

The script detects the version of Apache HTTP Server on remote host
and sets the KB.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Detected Apache version: 2.2.24
Location: 80/tcp
CPE: cpe:/a:apache:http_server:2.2.24

Concluded from version identification result:
Server: Apache/2.2.24

</description>
          </result>
          <result id="75cb67d7-3328-4475-a520-a987f5ae4440">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="3fc0a5b7-3f2f-4a2f-9c1c-e8e1543287da">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>mysql (3306/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="564d1459-42e0-4bab-8e2d-13186f0d1b9d">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>mysql (3306/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.100152">
              <name>MySQL/MariaDB Detection</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=Detection of installed version of MySQL/MariaDB.

Detect a running MySQL/MariaDB by getting the banner, Extract the version
from the banner and store the information in KB</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Scanner received a ER_HOST_NOT_PRIVILEGED error from the remote MySQL/MariaDB server.
Some tests may fail. Allow the scanner to access the remote MySQL server for better results.
</description>
          </result>
          <result id="4a15a470-f47c-418e-a85e-1f8a4da0b3ab">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>mysql (3306/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>An unknown service is running on this port.
It is usually reserved for MySQL
</description>
          </result>
          <result id="e0dd6905-ca98-4163-959b-84dc03b3a6d4">
            <subnet>192.168.1.64</subnet>
            <host>192.168.1.64</host>
            <port>netbios-ns (137/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10150">
              <name>Using NetBIOS to retrieve information from a Windows host</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Block those ports from outside communication|summary=The NetBIOS port is open (UDP:137). A remote attacker may use this to gain
access to sensitive information such as computer name, workgroup/domain
name, currently logged on user name, etc.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The following 3 NetBIOS names have been gathered :
 TOM-DEV-MBP    
 TOM-DEV-MBP    
 WORKGROUP      
The remote host has the following MAC address on its adapter :
   5c:96:9d:75:f0:99

If you do not want to allow everyone to find the NetBios name
of your computer, you should filter incoming traffic to this port.
</description>
          </result>
        </host>
      </content>
    </report>
    <report id="report_192.168.1.77">
      <content>
        <host xmlns="">
          <result id="c02a1d44-402c-4ab3-931f-049f1248cc28">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.902815">
              <name>TCP Sequence Number Approximation Reset Denial of Service Vulnerability</name>
              <family>Denial of Service</family>
              <cvss_base>5.0</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>CVE-2004-0230</cve>
              <bid>10183</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:P|summary=The host is running TCP services and is prone to denial of service
vulnerability.|vuldetect=A TCP Reset packet with a different sequence number is sent to
the target. A previously open connection is then checked to see if the target
closed it or not.|solution=Please see the referenced advisories for more information on obtaining
and applying fixes.|insight=The flaw is triggered when spoofed TCP Reset packets are received by the
targeted TCP stack and will result in loss of availability for the attacked
TCP services.|affected=TCP/IP v4|impact=Successful exploitation will allow remote attackers to guess sequence numbers
and cause a denial of service to persistent TCP connections by repeatedly
injecting a TCP RST packet.</tags>
              <cert/>
              <xref>URL:http://www.osvdb.org/4030, URL:http://xforce.iss.net/xforce/xfdb/15886, URL:http://www.us-cert.gov/cas/techalerts/TA04-111A.html, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY55949, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY55950, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY62006, URL:http://www.microsoft.com/technet/security/Bulletin/MS05-019.mspx, URL:http://www.microsoft.com/technet/security/bulletin/ms06-064.mspx, URL:http://www.cisco.com/en/US/products/csa/cisco-sa-20040420-tcp-nonios.html, URL:http://www.cisco.com/en/US/products/csa/cisco-sa-20040420-tcp-nonios.html</xref>
            </nvt>
            <threat>Medium</threat>
            <description/>
          </result>
          <result id="7971375b-5992-4a66-aa6c-136ed885fc51">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>cadkey-tablet (1400/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="73e5698e-c868-4972-a10b-a74fab29b543">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>cadkey-tablet (1400/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10107">
              <name>HTTP Server type and version</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Configure your server to use an alternate name like
    'Wintendo httpD w/Dotmatrix display'
Be sure to remove common logos like apache_pb.gif.
With Apache, you can set the directive 'ServerTokens Prod' to limit
the information emanating from the server in its response headers.|summary=This detects the HTTP Server's type and version.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The remote web server type is :

Linux UPnP/1.0 Sonos/24.0-69180 (BR100) 

</description>
          </result>
          <result id="15243c87-6e03-49a9-8030-e7f8a9c0395f">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>cadkey-tablet (1400/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A web server is running on this port
</description>
          </result>
          <result id="7ebe9c12-5ac4-4feb-8274-34f6ddce9938">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>cadkey-tablet (1400/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.11032">
              <name>Directory Scanner</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to determine the presence of various
common dirs on the remote web server</tags>
              <cert/>
              <xref>OWASP:OWASP-CM-006</xref>
            </nvt>
            <threat>Log</threat>
            <description>The following directories were discovered:
/img, /status, /support, /xml

While this is not, in and of itself, a bug, you should manually inspect 
these directories to ensure that they are in compliance with company
security standards

</description>
          </result>
          <result id="e3b4598f-c06c-4d22-8c8f-c3d25ac27be1">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>cadkey-tablet (1400/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80110">
              <name>wapiti (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses wapiti to find  
web security issues.

Make sure to have wapiti 2.x as wapiti 1.x is not supported. 

See the preferences section for wapiti options.

Note that OpenVAS is using limited set of wapiti options.
Therefore, for more complete web assessment, you should
use standalone wapiti tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>wapiti could not be found in your system path.
OpenVAS was unable to execute wapiti and to perform the scan you
requested.
Please make sure that wapiti is installed and that wapiti is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="a4da6d08-3ed7-4aa7-b10b-6456eb0e217c">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>general/icmp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103190">
              <name>ICMP Timestamp Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>CVE-1999-0524</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:L/AC:L/Au:N/C:N/I:N/A:N|summary=The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc0792.txt</xref>
            </nvt>
            <threat>Log</threat>
            <description>
 Summary:
 The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.
</description>
          </result>
          <result id="6d9739ed-3e08-4720-9b3d-22923759148f">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.102002">
              <name>OS fingerprinting</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script performs ICMP based OS fingerprinting (as described by
Ofir Arkin and Fyodor Yarochkin in Phrack #57). It can be used to determine
remote operating system version.</tags>
              <cert/>
              <xref>URL:http://www.phrack.org/issues.html?issue=57&amp;amp;id=7#article</xref>
            </nvt>
            <threat>Log</threat>
            <description>ICMP based OS fingerprint results: (100% confidence)

Linux Kernel
</description>
          </result>
          <result id="2f4451fa-c884-4d51-93c8-23317be94aea">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.110001">
              <name>arachni (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses arachni ruby command line to find  
web security issues.

See the preferences section for arachni options.

Note that OpenVAS is using limited set of arachni options.
Therefore, for more complete web assessment, you should
use standalone arachni tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Arachni could not be found in your system path.
OpenVAS was unable to execute Arachni and to perform the scan you
requested.
Please make sure that Arachni is installed and that arachni is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="03aad520-3170-43a6-9013-7e03cdbadfba">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.14260">
              <name>Nikto (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses nikto(1) to find weak CGI scripts
and other known issues regarding web server security.
See the preferences section for configuration options.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nikto could not be found in your system path.
OpenVAS was unable to execute Nikto and to perform the scan you
requested.
Please make sure that Nikto is installed and that nikto.pl or nikto is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="957b619b-aeb8-46f5-ada0-be68308f38ee">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.900239">
              <name>Checks for open tcp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open tcp ports of the
tcp ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open TCP ports: 1400
</description>
          </result>
          <result id="9efb81bb-3c57-4422-a866-c9c89b7b84c6">
            <subnet>192.168.1.77</subnet>
            <host>192.168.1.77</host>
            <port>ssdp (1900/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103652">
              <name>MiniUPnPd Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=Detection of the UPnP protocol.

The script sends a UPnP discovery request and attempts to
determine if the remote host supports the UPnP protocol</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The remote Host supports the UPnP protocol. You should restrict access
to port 1900/udp. The remote Host answers the following to a SSDP M-SEARCH request

HTTP/1.1 200 OK 
CACHE-CONTROL: max-age = 1800 
EXT: 
LOCATION: http://192.168.1.77:1400/xml/device_description.xml 
SERVER: Linux UPnP/1.0 Sonos/24.0-69180 (BR100) 
ST: uuid:RINCON_000E581E0E6001400 
USN: uuid:RINCON_000E581E0E6001400 
X-RINCON-BOOTSEQ: 9 
X-RINCON-HOUSEHOLD: Sonos_y6WlVDefHOgqbXMzmsKCD4GiJa 
 


</description>
          </result>
        </host>
      </content>
    </report>
    <report id="report_192.168.1.78">
      <content>
        <host xmlns="">
          <result id="e2d68ab5-d465-455e-94a8-e639698f3b76">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.902815">
              <name>TCP Sequence Number Approximation Reset Denial of Service Vulnerability</name>
              <family>Denial of Service</family>
              <cvss_base>5.0</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>CVE-2004-0230</cve>
              <bid>10183</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:P|summary=The host is running TCP services and is prone to denial of service
vulnerability.|vuldetect=A TCP Reset packet with a different sequence number is sent to
the target. A previously open connection is then checked to see if the target
closed it or not.|solution=Please see the referenced advisories for more information on obtaining
and applying fixes.|insight=The flaw is triggered when spoofed TCP Reset packets are received by the
targeted TCP stack and will result in loss of availability for the attacked
TCP services.|affected=TCP/IP v4|impact=Successful exploitation will allow remote attackers to guess sequence numbers
and cause a denial of service to persistent TCP connections by repeatedly
injecting a TCP RST packet.</tags>
              <cert/>
              <xref>URL:http://www.osvdb.org/4030, URL:http://xforce.iss.net/xforce/xfdb/15886, URL:http://www.us-cert.gov/cas/techalerts/TA04-111A.html, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY55949, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY55950, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY62006, URL:http://www.microsoft.com/technet/security/Bulletin/MS05-019.mspx, URL:http://www.microsoft.com/technet/security/bulletin/ms06-064.mspx, URL:http://www.cisco.com/en/US/products/csa/cisco-sa-20040420-tcp-nonios.html, URL:http://www.cisco.com/en/US/products/csa/cisco-sa-20040420-tcp-nonios.html</xref>
            </nvt>
            <threat>Medium</threat>
            <description/>
          </result>
          <result id="caba581c-1872-48d2-aac9-d7c1e135940a">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80091">
              <name>TCP timestamps</name>
              <family>General</family>
              <cvss_base>2.6</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:H/Au:N/C:P/I:N/A:N|summary=The remote host implements TCP timestamps and therefore allows to compute
the uptime.|vuldetect=Special IP packets are forged and sent with a little delay in between to the
target IP. The responses are searched for a timestamps. If found, the
timestamps are reported.|solution=To disable TCP timestamps on linux add the line 'net.ipv4.tcp_timestamps = 0' to
/etc/sysctl.conf. Execute 'sysctl -p' to apply the settings at runtime.

To disable TCP timestamps on Windows execute 'netsh int tcp set global timestamps=disabled'

Starting with Windows Server 2008 and Vista, the timestamp can not be completely disabled.

The default behavior of the TCP/IP stack on this Systems is, to not use the 
Timestamp options when initiating TCP connections, but use them if the TCP peer 
that is initiating communication includes them in their synchronize (SYN) segment.

See also: http://www.microsoft.com/en-us/download/details.aspx?id=9152|affected=TCP/IPv4 implementations that implement RFC1323.|insight=The remote host implements TCP timestamps, as defined by RFC1323.|impact=A side effect of this feature is that the uptime of the remote
host can sometimes be computed.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc1323.txt</xref>
            </nvt>
            <threat>Medium</threat>
            <description>It was detected that the host implements RFC1323.

The following timestamps were retrieved with a delay of 1 seconds in-between:
Paket 1: 38168398
Paket 2: 38168729


</description>
          </result>
          <result id="23ffe16a-b367-4146-a2f0-0cca0334cc78">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>cadkey-tablet (1400/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="d2fc0935-01d6-4593-a8b3-a70fa83c20f5">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>cadkey-tablet (1400/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.66286">
              <name>Identify unknown services with nmap</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin performs service detection by launching nmap's
service probe against ports running unidentified services.

Description :

This plugin is a complement of find_service.nasl. It launches
nmap -sV (probe requests) against ports that are running
unidentified services.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nmap service detection result for this port: cadkey-tablet
This is a guess. A confident identification of the service was not possible.
</description>
          </result>
          <result id="3ee0ff90-950c-4d66-b493-3270c474734e">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/HOST-T</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.810003">
              <name>Host Summary</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This NVT summarizes technical information about the scanned host
collected during the scan.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>traceroute:192.168.1.228,192.168.1.78
TCP ports:1410,1400
UDP ports:

</description>
          </result>
          <result id="2808c575-38af-49f1-84f0-aab56b1ef507">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/icmp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103190">
              <name>ICMP Timestamp Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>CVE-1999-0524</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:L/AC:L/Au:N/C:N/I:N/A:N|summary=The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc0792.txt</xref>
            </nvt>
            <threat>Log</threat>
            <description>
 Summary:
 The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.
</description>
          </result>
          <result id="d777bf17-a78f-473a-acdb-067dc1cd6e1b">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103079">
              <name>DIRB (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script uses DIRB to find directories and files on web
          applications via brute forcing.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>DIRB could not be found in your system path.
OpenVAS was unable to execute DIRB and to perform the scan you
requested.
Please make sure that DIRB is installed and is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="a1a257ed-5b0f-4668-8044-b11fa0e0bbc1">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103978">
              <name>Checks for open udp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open UDP ports of the UDP ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open UDP ports: [None found]
</description>
          </result>
          <result id="1da993e2-b634-489f-a039-c940e1e292df">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.110001">
              <name>arachni (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses arachni ruby command line to find  
web security issues.

See the preferences section for arachni options.

Note that OpenVAS is using limited set of arachni options.
Therefore, for more complete web assessment, you should
use standalone arachni tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Arachni could not be found in your system path.
OpenVAS was unable to execute Arachni and to perform the scan you
requested.
Please make sure that Arachni is installed and that arachni is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="95cf8a27-8219-44f5-a8f1-4a0dbc73d468">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.14260">
              <name>Nikto (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses nikto(1) to find weak CGI scripts
and other known issues regarding web server security.
See the preferences section for configuration options.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nikto could not be found in your system path.
OpenVAS was unable to execute Nikto and to perform the scan you
requested.
Please make sure that Nikto is installed and that nikto.pl or nikto is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="14671e80-72c5-451c-8c4a-0d96cc07b36f">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.51662">
              <name>Traceroute</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Block unwanted packets from escaping your network.|summary=A traceroute from the scanning server to the target system was
conducted. This traceroute is provided primarily for informational
value only. In the vast majority of cases, it does not represent a
vulnerability. However, if the displayed traceroute contains any
private addresses that should not have been publicly visible, then you
have an issue you need to correct.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Here is the route from 192.168.1.228 to 192.168.1.78:

192.168.1.228
192.168.1.78

</description>
          </result>
          <result id="3cda1019-d421-4f01-9c8c-6b690097aa95">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>hiq (1410/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="c2a9fcfd-252f-4c67-b9a2-b1062c8ae904">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>hiq (1410/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A web server is running on this port
</description>
          </result>
          <result id="abbcf918-0b26-42ba-89c0-41b72625d431">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>hiq (1410/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80110">
              <name>wapiti (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses wapiti to find  
web security issues.

Make sure to have wapiti 2.x as wapiti 1.x is not supported. 

See the preferences section for wapiti options.

Note that OpenVAS is using limited set of wapiti options.
Therefore, for more complete web assessment, you should
use standalone wapiti tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>wapiti could not be found in your system path.
OpenVAS was unable to execute wapiti and to perform the scan you
requested.
Please make sure that wapiti is installed and that wapiti is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="bb8d7d5c-2d04-4e29-8e2f-86a4572e1203">
            <subnet>192.168.1.78</subnet>
            <host>192.168.1.78</host>
            <port>ssdp (1900/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103652">
              <name>MiniUPnPd Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=Detection of the UPnP protocol.

The script sends a UPnP discovery request and attempts to
determine if the remote host supports the UPnP protocol</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The remote Host supports the UPnP protocol. You should restrict access
to port 1900/udp. The remote Host answers the following to a SSDP M-SEARCH request

HTTP/1.1 200 OK 
CACHE-CONTROL: max-age = 1800 
EXT: 
LOCATION: http://192.168.1.78:1400/xml/device_description.xml 
SERVER: Linux UPnP/1.0 Sonos/24.0-71060 (ZPS1) 
ST: uuid:RINCON_000E58CA17F801400 
USN: uuid:RINCON_000E58CA17F801400 
X-RINCON-BOOTSEQ: 25 
X-RINCON-HOUSEHOLD: Sonos_y6WlVDefHOgqbXMzmsKCD4GiJa 
 


</description>
          </result>
        </host>
      </content>
    </report>
    <report id="report_192.168.1.228">
      <content>
        <host xmlns="">
          <result id="d614a6b3-4e32-4589-87c8-210cf4785f41">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>ntp (123/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10884">
              <name>NTP read variables</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=A NTP (Network Time Protocol) server is listening on this port.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>
  Summary:
  A NTP (Network Time Protocol) server is listening on this port.
</description>
          </result>
          <result id="e26359c5-6830-4086-b478-9f6dfad4c618">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.102002">
              <name>OS fingerprinting</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script performs ICMP based OS fingerprinting (as described by
Ofir Arkin and Fyodor Yarochkin in Phrack #57). It can be used to determine
remote operating system version.</tags>
              <cert/>
              <xref>URL:http://www.phrack.org/issues.html?issue=57&amp;amp;id=7#article</xref>
            </nvt>
            <threat>Log</threat>
            <description>ICMP based OS fingerprint results: (92% confidence)

Linux Kernel
</description>
          </result>
          <result id="c4b633b5-a591-4a70-ad05-fc64ca62e416">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.14260">
              <name>Nikto (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses nikto(1) to find weak CGI scripts
and other known issues regarding web server security.
See the preferences section for configuration options.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nikto could not be found in your system path.
OpenVAS was unable to execute Nikto and to perform the scan you
requested.
Please make sure that Nikto is installed and that nikto.pl or nikto is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="99816dcc-6b00-4fb5-8a19-b0656e7864c7">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.900239">
              <name>Checks for open tcp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open tcp ports of the
tcp ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open TCP ports: 22, 80
</description>
          </result>
          <result id="68ff4dd8-8097-4363-93e7-79f45de5153f">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>http (80/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="774f2901-9038-422d-ab78-3d33ea550a31">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10107">
              <name>HTTP Server type and version</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Configure your server to use an alternate name like
    'Wintendo httpD w/Dotmatrix display'
Be sure to remove common logos like apache_pb.gif.
With Apache, you can set the directive 'ServerTokens Prod' to limit
the information emanating from the server in its response headers.|summary=This detects the HTTP Server's type and version.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The remote web server type is :

Apache/2.2.22 (Debian) 


Solution : You can set the directive 'ServerTokens Prod' to limit
the information emanating from the server in its response headers.
</description>
          </result>
          <result id="677539f1-1f3f-4281-a731-07a4515963b9">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A web server is running on this port
</description>
          </result>
          <result id="82a4c12f-d2bb-4798-aa69-402a9aea68f0">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.11032">
              <name>Directory Scanner</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to determine the presence of various
common dirs on the remote web server</tags>
              <cert/>
              <xref>OWASP:OWASP-CM-006</xref>
            </nvt>
            <threat>Log</threat>
            <description>The following directories were discovered:
/cgi-bin, /icons

While this is not, in and of itself, a bug, you should manually inspect 
these directories to ensure that they are in compliance with company
security standards

</description>
          </result>
          <result id="7974cbae-f46a-4710-9ded-9c40896c0997">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.900498">
              <name>Apache Web ServerVersion Detection</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Detection of installed version of Apache Web Server

The script detects the version of Apache HTTP Server on remote host
and sets the KB.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Detected Apache version: 2.2.22
Location: 80/tcp
CPE: cpe:/a:apache:http_server:2.2.22

Concluded from version identification result:
Server: Apache/2.2.22

</description>
          </result>
          <result id="760fc9fd-7b63-4c7c-bea3-c9c554e4b67b">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="cf81a632-ae44-428c-9d69-12f879a0e777">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10267">
              <name>SSH Server type and version</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=This detects the SSH Server's type and version by connecting to the server
and processing the buffer received.
This information gives potential attackers additional information about the
system they are attacking. Versions and Types should be omitted
where possible.|solution=Apply filtering to disallow access to this port from untrusted hosts</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Detected SSH server version: SSH-2.0-OpenSSH_6.0p1 Debian-4
Remote SSH supported authentication: password,publickey 
Remote SSH banner: 
(not available)

CPE: cpe:/a:openbsd:openssh:6.0p1

Concluded from remote connection attempt with credentials:
  Login: OpenVAS
  Password: OpenVAS

</description>
          </result>
          <result id="424e8838-33fc-432b-ae69-1ccab6cfd9e2">
            <subnet>192.168.1.228</subnet>
            <host>192.168.1.228</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>An ssh server is running on this port
</description>
          </result>
        </host>
      </content>
    </report>
    <report id="report_192.168.1.254">
      <content>
        <host xmlns="">
          <result id="785c0a64-4a09-4ded-8a98-cc7c353e6592">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.902815">
              <name>TCP Sequence Number Approximation Reset Denial of Service Vulnerability</name>
              <family>Denial of Service</family>
              <cvss_base>5.0</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>CVE-2004-0230</cve>
              <bid>10183</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:P|summary=The host is running TCP services and is prone to denial of service
vulnerability.|vuldetect=A TCP Reset packet with a different sequence number is sent to
the target. A previously open connection is then checked to see if the target
closed it or not.|solution=Please see the referenced advisories for more information on obtaining
and applying fixes.|insight=The flaw is triggered when spoofed TCP Reset packets are received by the
targeted TCP stack and will result in loss of availability for the attacked
TCP services.|affected=TCP/IP v4|impact=Successful exploitation will allow remote attackers to guess sequence numbers
and cause a denial of service to persistent TCP connections by repeatedly
injecting a TCP RST packet.</tags>
              <cert/>
              <xref>URL:http://www.osvdb.org/4030, URL:http://xforce.iss.net/xforce/xfdb/15886, URL:http://www.us-cert.gov/cas/techalerts/TA04-111A.html, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY55949, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY55950, URL:http://www-01.ibm.com/support/docview.wss?uid=isg1IY62006, URL:http://www.microsoft.com/technet/security/Bulletin/MS05-019.mspx, URL:http://www.microsoft.com/technet/security/bulletin/ms06-064.mspx, URL:http://www.cisco.com/en/US/products/csa/cisco-sa-20040420-tcp-nonios.html, URL:http://www.cisco.com/en/US/products/csa/cisco-sa-20040420-tcp-nonios.html</xref>
            </nvt>
            <threat>Medium</threat>
            <description/>
          </result>
          <result id="edec4bcf-8cd3-409b-86ed-b9a79c3e55e5">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80091">
              <name>TCP timestamps</name>
              <family>General</family>
              <cvss_base>2.6</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:H/Au:N/C:P/I:N/A:N|summary=The remote host implements TCP timestamps and therefore allows to compute
the uptime.|vuldetect=Special IP packets are forged and sent with a little delay in between to the
target IP. The responses are searched for a timestamps. If found, the
timestamps are reported.|solution=To disable TCP timestamps on linux add the line 'net.ipv4.tcp_timestamps = 0' to
/etc/sysctl.conf. Execute 'sysctl -p' to apply the settings at runtime.

To disable TCP timestamps on Windows execute 'netsh int tcp set global timestamps=disabled'

Starting with Windows Server 2008 and Vista, the timestamp can not be completely disabled.

The default behavior of the TCP/IP stack on this Systems is, to not use the 
Timestamp options when initiating TCP connections, but use them if the TCP peer 
that is initiating communication includes them in their synchronize (SYN) segment.

See also: http://www.microsoft.com/en-us/download/details.aspx?id=9152|affected=TCP/IPv4 implementations that implement RFC1323.|insight=The remote host implements TCP timestamps, as defined by RFC1323.|impact=A side effect of this feature is that the uptime of the remote
host can sometimes be computed.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc1323.txt</xref>
            </nvt>
            <threat>Medium</threat>
            <description>It was detected that the host implements RFC1323.

The following timestamps were retrieved with a delay of 1 seconds in-between:
Paket 1: 117992400
Paket 2: 117992531


</description>
          </result>
          <result id="a77c5bee-a6f7-4d06-82f4-cafd3926059a">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.100499">
              <name>Samba 'client/mount.cifs.c' Remote Denial of Service Vulnerability</name>
              <family>Denial of Service</family>
              <cvss_base>2.1</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>CVE-2010-0547</cve>
              <bid>38326</bid>
              <tags>cvss_base_vector=AV:L/AC:L/Au:N/C:N/I:N/A:P|summary=Samba is prone to a remote denial-of-service vulnerability.

A remote attacker can exploit this issue to crash the affected
application, denying service to legitimate users.

Samba 3.4.5 and earlier are vulnerable.</tags>
              <cert>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2012-0171"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2011-1306"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2011-1305"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2011-1176"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0984"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0641"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0624"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0491"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0462"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2010-0275"/>
              </cert>
              <xref>URL:http://www.securityfocus.com/bid/38326, URL:http://git.samba.org/?p=samba.git;a=commit;h=a065c177dfc8f968775593ba00dffafeebb2e054, URL:http://us1.samba.org/samba/</xref>
            </nvt>
            <threat>Medium</threat>
            <description>
 Summary:
 Samba is prone to a remote denial-of-service vulnerability.

A remote attacker can exploit this issue to crash the affected
application, denying service to legitimate users.

Samba 3.4.5 and earlier are vulnerable.
</description>
          </result>
          <result id="c56c8c1c-eb4b-44c1-a087-51114ff5f1d7">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103503">
              <name>openssh-server Forced Command Handling Information Disclosure Vulnerability</name>
              <family>General</family>
              <cvss_base>3.5</cvss_base>
              <risk_factor>Medium</risk_factor>
              <cve>CVE-2012-0814</cve>
              <bid>51702</bid>
              <tags>cvss_base_vector=AV:N/AC:M/Au:S/C:P/I:N/A:N|solution=Updates are available. Please see the references for more information.|summary=The auth_parse_options function in auth-options.c in sshd in OpenSSH before 5.7
provides debug messages containing authorized_keys command options, which allows
remote authenticated users to obtain potentially sensitive information by
reading these messages, as demonstrated by the shared user account required by
Gitolite. NOTE: this can cross privilege boundaries because a user account may
intentionally have no shell or filesystem access, and therefore may have no
supported way to read an authorized_keys file in its own home directory.

OpenSSH before 5.7 is affected
</tags>
              <cert>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2013-1307"/>
                <cert_ref type="DFN-CERT" id="DFN-CERT-2013-0991"/>
              </cert>
              <xref>URL:http://www.securityfocus.com/bid/51702, URL:http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=657445, URL:http://packages.debian.org/squeeze/openssh-server, URL:https://downloads.avaya.com/css/P8/documents/100161262</xref>
            </nvt>
            <threat>Medium</threat>
            <description>According to its banner, the version of OpenSSH installed on the remote
host is older than 5.7:
 ssh-1.99-openssh_4.2


 Summary:
 The auth_parse_options function in auth-options.c in sshd in OpenSSH before 5.7
provides debug messages containing authorized_keys command options, which allows
remote authenticated users to obtain potentially sensitive information by
reading these messages, as demonstrated by the shared user account required by
Gitolite. NOTE: this can cross privilege boundaries because a user account may
intentionally have no shell or filesystem access, and therefore may have no
supported way to read an authorized_keys file in its own home directory.

OpenSSH before 5.7 is affected;
 Solution:
 Updates are available. Please see the references for more information.
</description>
          </result>
          <result id="dc201c8f-08b6-447d-b2ac-0b9a32dee663">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>domain (53/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.100675">
              <name>Nominum Vantio Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Nominum Vantio, a recursive caching server from Nominumat, is running
at this host.</tags>
              <cert/>
              <xref>URL:http://www.nominum.com/</xref>
            </nvt>
            <threat>Low</threat>
            <description>
 Summary:
 Nominum Vantio, a recursive caching server from Nominumat, is running
at this host.
</description>
          </result>
          <result id="8b2bea4b-58b0-42b8-af5f-4206d44bc6f4">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/SMBClient</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.90011">
              <name>SMB Test</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Test remote host SMB Functions</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>OS Version = UNIX
Domain = HOME
SMB Serverversion = SAMBA 3.0.28

</description>
          </result>
          <result id="174e8468-66f8-463e-9070-26ca7d277b91">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/SMBClient</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.90011">
              <name>SMB Test</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Test remote host SMB Functions</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>OS Version = UNIX
Domain = HOME
SMB Serverversion = Samba 3.0.28

</description>
          </result>
          <result id="bc450ccc-1dba-4352-bb83-d8b3bf1e44ed">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/SMBClient</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.90011">
              <name>SMB Test</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Test remote host SMB Functions</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>OS Version = Unix
Domain = HOME
SMB Serverversion = SAMBA 3.0.28

</description>
          </result>
          <result id="b243fb05-6b8e-4456-8522-700a2a3dfdde">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/SMBClient</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.90011">
              <name>SMB Test</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Test remote host SMB Functions</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>OS Version = Unix
Domain = HOME
SMB Serverversion = Samba 3.0.28

</description>
          </result>
          <result id="661c0f48-546b-4bb5-b401-cc26d464df0c">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>ntp (123/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10884">
              <name>NTP read variables</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=A NTP (Network Time Protocol) server is listening on this port.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Low</threat>
            <description>
  Summary:
  A NTP (Network Time Protocol) server is listening on this port.
</description>
          </result>
          <result id="2abcf128-da86-43d7-a015-29b46bf95bb0">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>compaq-wcp (2555/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="afaa5f1b-de04-4226-a5b6-2cc639a58812">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>compaq-wcp (2555/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A web server is running on this port
</description>
          </result>
          <result id="3bf519ac-315c-40a1-9ef2-7b37896bb21c">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>compaq-wcp (2555/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80110">
              <name>wapiti (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses wapiti to find  
web security issues.

Make sure to have wapiti 2.x as wapiti 1.x is not supported. 

See the preferences section for wapiti options.

Note that OpenVAS is using limited set of wapiti options.
Therefore, for more complete web assessment, you should
use standalone wapiti tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>wapiti could not be found in your system path.
OpenVAS was unable to execute wapiti and to perform the scan you
requested.
Please make sure that wapiti is installed and that wapiti is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="c8cb0837-2a33-43d5-95ac-e7c65967943b">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/CPE-T</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.810002">
              <name>CPE Inventory</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=CPE Inventory

This NVT uses information present in the Knowledge Base (KB) to
determine CPE identities (http://cpe.mitre.org/) of operating
systems, services and applications detected during the scan.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>192.168.1.254|cpe:/a:samba:samba:3.0.28
192.168.1.254|cpe:/a:openbsd:openssh:4.2
192.168.1.254|cpe:/o:linux:kernel

</description>
          </result>
          <result id="5791a27a-103f-4b4e-b2c7-999679103115">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/HOST-T</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.810003">
              <name>Host Summary</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This NVT summarizes technical information about the scanned host
collected during the scan.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>traceroute:192.168.1.228,192.168.1.254
TCP ports:443,445,22,2555,8080,2556,139,8443,80
UDP ports:

</description>
          </result>
          <result id="ef0d2f7f-6e30-4329-9379-687447bd2153">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/icmp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103190">
              <name>ICMP Timestamp Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>CVE-1999-0524</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:L/AC:L/Au:N/C:N/I:N/A:N|summary=The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.</tags>
              <cert/>
              <xref>URL:http://www.ietf.org/rfc/rfc0792.txt</xref>
            </nvt>
            <threat>Log</threat>
            <description>
 Summary:
 The remote host responded to an ICMP timestamp request. The Timestamp Reply is
an ICMP message which replies to a Timestamp message. It consists of the
originating timestamp sent by the sender of the Timestamp as well as a receive
timestamp and a transmit timestamp. This information could theoretically be used
to exploit weak time-based random number generators in other services.
</description>
          </result>
          <result id="8d0cf052-da2d-4294-a81f-c19735e708b7">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.102002">
              <name>OS fingerprinting</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script performs ICMP based OS fingerprinting (as described by
Ofir Arkin and Fyodor Yarochkin in Phrack #57). It can be used to determine
remote operating system version.</tags>
              <cert/>
              <xref>URL:http://www.phrack.org/issues.html?issue=57&amp;amp;id=7#article</xref>
            </nvt>
            <threat>Log</threat>
            <description>ICMP based OS fingerprint results: (100% confidence)

Linux Kernel
</description>
          </result>
          <result id="468c926e-0635-48a5-bf0d-0b11cd910394">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103079">
              <name>DIRB (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script uses DIRB to find directories and files on web
          applications via brute forcing.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>DIRB could not be found in your system path.
OpenVAS was unable to execute DIRB and to perform the scan you
requested.
Please make sure that DIRB is installed and is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="5ebdee0c-a9c5-425f-89f7-0f207e25c423">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103978">
              <name>Checks for open udp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open UDP ports of the UDP ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open UDP ports: [None found]
</description>
          </result>
          <result id="4119fad2-8019-4500-98fc-4ad08e532a69">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.110001">
              <name>arachni (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses arachni ruby command line to find  
web security issues.

See the preferences section for arachni options.

Note that OpenVAS is using limited set of arachni options.
Therefore, for more complete web assessment, you should
use standalone arachni tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Arachni could not be found in your system path.
OpenVAS was unable to execute Arachni and to perform the scan you
requested.
Please make sure that Arachni is installed and that arachni is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="84354df2-0cdc-4964-8c0b-25905cf2ac51">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.14260">
              <name>Nikto (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses nikto(1) to find weak CGI scripts
and other known issues regarding web server security.
See the preferences section for configuration options.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nikto could not be found in your system path.
OpenVAS was unable to execute Nikto and to perform the scan you
requested.
Please make sure that Nikto is installed and that nikto.pl or nikto is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="6f71f63b-b317-403c-9a9f-cd151c61192a">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.51662">
              <name>Traceroute</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Block unwanted packets from escaping your network.|summary=A traceroute from the scanning server to the target system was
conducted. This traceroute is provided primarily for informational
value only. In the vast majority of cases, it does not represent a
vulnerability. However, if the displayed traceroute contains any
private addresses that should not have been publicly visible, then you
have an issue you need to correct.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Here is the route from 192.168.1.228 to 192.168.1.254:

192.168.1.228
192.168.1.254

</description>
          </result>
          <result id="f0bb3401-37c9-440c-b837-771a6e865725">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.802726">
              <name>Microsoft SMB Signing Disabled</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Checking for SMB signing is disabled.

The script logs in via smb, checks the SMB Negotiate Protocol response to
confirm SMB signing is disabled.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>SMB signing is disabled on this host
</description>
          </result>
          <result id="32792fe9-3b4b-4d34-a2aa-af497396cbe6">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>general/tcp</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.900239">
              <name>Checks for open tcp ports</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=Collects all open tcp ports of the
tcp ports identified so far.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Open TCP ports: 443, 445, 22, 2555, 8080, 2556, 139, 8443, 80
</description>
          </result>
          <result id="2470565a-2d43-4ffe-b644-ae29e1125903">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>http (80/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="8c3a0c54-2fd3-41e5-9f53-846f1e30261e">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A web server is running on this port
</description>
          </result>
          <result id="2b5bd379-f5b8-49e4-8cfb-366959dba737">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10662">
              <name>Web mirroring</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script makes a mirror of the remote web site
and extracts the list of CGIs that are used by the remote
host.

It is suggested you allow a long-enough timeout value for
this test routine and also adjust the setting on
the number of pages to mirror.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The following CGI have been discovered :

Syntax : cginame (arguments [default value])

/index.cgi (request_id [11014340] active_page [9096] active_page_str [page_bt_home] mimic_button_field [] button_value [] post_id [0] )
. (active_page_str [page_a_z] active_page [9096] nav_clear [1] request_id [11014340] )

</description>
          </result>
          <result id="efb911b5-1a98-46d8-a593-fcd6bf2ebea0">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>http (80/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80110">
              <name>wapiti (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses wapiti to find  
web security issues.

Make sure to have wapiti 2.x as wapiti 1.x is not supported. 

See the preferences section for wapiti options.

Note that OpenVAS is using limited set of wapiti options.
Therefore, for more complete web assessment, you should
use standalone wapiti tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>wapiti could not be found in your system path.
OpenVAS was unable to execute wapiti and to perform the scan you
requested.
Please make sure that wapiti is installed and that wapiti is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="2542c8cd-77e3-4afb-b814-bd4bf2d28569">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>http-alt (8080/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="2ed77c9a-7276-4332-8157-cc3e1f81283b">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>http-alt (8080/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A web server is running on this port
</description>
          </result>
          <result id="9d6ee2a3-47c7-4de0-a1a9-ffa4ea25b422">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>http-alt (8080/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.80110">
              <name>wapiti (NASL wrapper)</name>
              <family>Web application abuses</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin uses wapiti to find  
web security issues.

Make sure to have wapiti 2.x as wapiti 1.x is not supported. 

See the preferences section for wapiti options.

Note that OpenVAS is using limited set of wapiti options.
Therefore, for more complete web assessment, you should
use standalone wapiti tool for deeper/customized checks.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>wapiti could not be found in your system path.
OpenVAS was unable to execute wapiti and to perform the scan you
requested.
Please make sure that wapiti is installed and that wapiti is
available in the PATH variable defined for your environment.
</description>
          </result>
          <result id="590560c4-3545-4fe9-b86f-5761786af0ac">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>https (443/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="a55d8254-5d99-40e8-966f-21d0dc6aa352">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>https (443/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>An unknown service is running on this port.
It is usually reserved for HTTPS
</description>
          </result>
          <result id="feae53ea-4c31-4556-bf87-8eb6a683f01f">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>https (443/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103441">
              <name>Check for supported SSL Ciphers</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This Plugin report about supported SSL Ciphers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>
Server supports SSLv2 ciphers.

Server supports SSLv3 ciphers.

Server supports TLSv1 ciphers.

Medium strength ciphers are
  SSL3_RSA_RC4_128_MD5 : SSL_NOT_EXP
  SSL3_RSA_RC4_128_SHA : SSL_NOT_EXP
  SSL3_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
  TLS1_RSA_RC4_128_MD5 : SSL_NOT_EXP
  TLS1_RSA_RC4_128_SHA : SSL_NOT_EXP
  TLS1_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP

None of the Low strength ciphers are supported
</description>
          </result>
          <result id="fbf27a20-1573-4e97-90f2-dec36e7d39bf">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>https (443/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.66286">
              <name>Identify unknown services with nmap</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin performs service detection by launching nmap's
service probe against ports running unidentified services.

Description :

This plugin is a complement of find_service.nasl. It launches
nmap -sV (probe requests) against ports that are running
unidentified services.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nmap service detection result for this port: ssl|https
This is a guess. A confident identification of the service was not possible.
</description>
          </result>
          <result id="d19ad5f5-536a-46e9-800a-ad9a27722184">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>https (443/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.902816">
              <name>Check for SSL Medium Ciphers</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This Plugin reports about SSL Medium Ciphers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>
Server supports SSLv2 ciphers.

Server supports SSLv3 ciphers.

Server supports TLSv1 ciphers.

Medium strength ciphers are
  SSL3_RSA_RC4_128_MD5 : SSL_NOT_EXP
  SSL3_RSA_RC4_128_SHA : SSL_NOT_EXP
  SSL3_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
  TLS1_RSA_RC4_128_MD5 : SSL_NOT_EXP
  TLS1_RSA_RC4_128_SHA : SSL_NOT_EXP
  TLS1_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
</description>
          </result>
          <result id="02c98c52-b478-4dc0-b8bf-92ff23856e10">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="78d5c302-b7b6-4f7d-ac18-6e5b3a7c4040">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.102011">
              <name>SMB NativeLanMan</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=It is possible to extract OS, domain and SMB server information
from the Session Setup AndX Response packet which is generated
during NTLM authentication.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>
 Summary:
 It is possible to extract OS, domain and SMB server information
from the Session Setup AndX Response packet which is generated
during NTLM authentication.Detected SMB workgroup: HOME
Detected SMB server: Samba 3.0.28
Detected OS: Unix

</description>
          </result>
          <result id="f76cbc2b-77d0-447e-a008-a46dbcd5b37e">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10394">
              <name>SMB log in</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script attempts to logon into the remote host using 
 login/password credentials.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>It was possible to log into the remote host using the SMB protocol.

</description>
          </result>
          <result id="c0237536-4759-40c3-a71c-210c2b787f39">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>microsoft-ds (445/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.11011">
              <name>SMB on port 445</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script detects wether port 445 and 139 are open and
if thet are running SMB servers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>A CIFS server is running on this port
</description>
          </result>
          <result id="87ca5aa8-176e-4619-a8f7-3c17fe1ba922">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>netbios-ns (137/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10150">
              <name>Using NetBIOS to retrieve information from a Windows host</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|solution=Block those ports from outside communication|summary=The NetBIOS port is open (UDP:137). A remote attacker may use this to gain
access to sensitive information such as computer name, workgroup/domain
name, currently logged on user name, etc.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The following 7 NetBIOS names have been gathered :
 BTHUB4          = This is the computer name registered for workstation services by a WINS client.
 BTHUB4          = This is the current logged in user registered for this workstation.
 BTHUB4          = Computer name
   __MSBROWSE__ 
 HOME           
 HOME            = Workgroup / Domain name (part of the Browser elections)
 HOME            = Workgroup / Domain name

. This SMB server seems to be a SAMBA server (this is not a security
risk, this is for your information). This can be told because this server 
claims to have a null MAC address

If you do not want to allow everyone to find the NetBios name
of your computer, you should filter incoming traffic to this port.
</description>
          </result>
          <result id="c4229d65-da94-4b10-84f9-b6717a05f8a9">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>netbios-ssn (139/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="99385060-3b98-4b24-962e-e9fb6a45c5ca">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>netbios-ssn (139/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.11011">
              <name>SMB on port 445</name>
              <family>Windows</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This script detects wether port 445 and 139 are open and
if thet are running SMB servers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>An SMB server is running on this port
</description>
          </result>
          <result id="dad93c80-b282-4a92-90fd-791732eb052d">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>nicetec-nmsvc (2556/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="3754142d-b385-4a68-b68f-f53d4ceeff9d">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>nicetec-nmsvc (2556/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103441">
              <name>Check for supported SSL Ciphers</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This Plugin report about supported SSL Ciphers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>
Server supports SSLv2 ciphers.

Server supports SSLv3 ciphers.

Server supports TLSv1 ciphers.

Medium strength ciphers are
  SSL3_RSA_RC4_128_MD5 : SSL_NOT_EXP
  SSL3_RSA_RC4_128_SHA : SSL_NOT_EXP
  SSL3_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
  TLS1_RSA_RC4_128_MD5 : SSL_NOT_EXP
  TLS1_RSA_RC4_128_SHA : SSL_NOT_EXP
  TLS1_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP

None of the Low strength ciphers are supported
</description>
          </result>
          <result id="882ad9a5-3bc0-4227-a8b4-180a56625e8c">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>nicetec-nmsvc (2556/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.902816">
              <name>Check for SSL Medium Ciphers</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This Plugin reports about SSL Medium Ciphers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>
Server supports SSLv2 ciphers.

Server supports SSLv3 ciphers.

Server supports TLSv1 ciphers.

Medium strength ciphers are
  SSL3_RSA_RC4_128_MD5 : SSL_NOT_EXP
  SSL3_RSA_RC4_128_SHA : SSL_NOT_EXP
  SSL3_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
  TLS1_RSA_RC4_128_MD5 : SSL_NOT_EXP
  TLS1_RSA_RC4_128_SHA : SSL_NOT_EXP
  TLS1_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
</description>
          </result>
          <result id="819f6539-49b3-4d27-b102-e09ec4081bab">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>pcsync-https (8443/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="34e74571-7419-4190-81e5-87545f8b4826">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>pcsync-https (8443/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103441">
              <name>Check for supported SSL Ciphers</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This Plugin report about supported SSL Ciphers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>
Server supports SSLv2 ciphers.

Server supports SSLv3 ciphers.

Server supports TLSv1 ciphers.

Medium strength ciphers are
  SSL3_RSA_RC4_128_MD5 : SSL_NOT_EXP
  SSL3_RSA_RC4_128_SHA : SSL_NOT_EXP
  SSL3_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
  TLS1_RSA_RC4_128_MD5 : SSL_NOT_EXP
  TLS1_RSA_RC4_128_SHA : SSL_NOT_EXP
  TLS1_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP

None of the Low strength ciphers are supported
</description>
          </result>
          <result id="9b0e0e04-10ff-4064-bf0f-a04b259adfad">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>pcsync-https (8443/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.66286">
              <name>Identify unknown services with nmap</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin performs service detection by launching nmap's
service probe against ports running unidentified services.

Description :

This plugin is a complement of find_service.nasl. It launches
nmap -sV (probe requests) against ports that are running
unidentified services.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Nmap service detection result for this port: ssl|https-alt
This is a guess. A confident identification of the service was not possible.
</description>
          </result>
          <result id="6da990d3-6648-4d74-a09e-0df2fd0c637e">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>pcsync-https (8443/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.902816">
              <name>Check for SSL Medium Ciphers</name>
              <family>General</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This Plugin reports about SSL Medium Ciphers.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>
Server supports SSLv2 ciphers.

Server supports SSLv3 ciphers.

Server supports TLSv1 ciphers.

Medium strength ciphers are
  SSL3_RSA_RC4_128_MD5 : SSL_NOT_EXP
  SSL3_RSA_RC4_128_SHA : SSL_NOT_EXP
  SSL3_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
  TLS1_RSA_RC4_128_MD5 : SSL_NOT_EXP
  TLS1_RSA_RC4_128_SHA : SSL_NOT_EXP
  TLS1_RSA_DES_192_CBC3_SHA : SSL_NOT_EXP
</description>
          </result>
          <result id="d6fa9989-737e-4c33-87f8-6e20c3a392f6">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>ssdp (1900/udp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.103652">
              <name>MiniUPnPd Detection</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=Detection of the UPnP protocol.

The script sends a UPnP discovery request and attempts to
determine if the remote host supports the UPnP protocol</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>The remote Host supports the UPnP protocol. You should restrict access
to port 1900/udp. The remote Host answers the following to a SSDP M-SEARCH request

HTTP/1.1 200 OK 
DATE: Sun, 22 Dec 2013 14:05:08 GMT 
SERVER: OpenRG/4.7.5.1.83.8.130.1.17 UPnP/1.0 
CACHE-CONTROL: max-age=1800 
LOCATION: http://192.168.1.254:2555/upnp/UPnP_BThomeHub4A_2c3996abd64c/desc.xml 
EXT:  
ST: upnp:rootdevice 
USN: uuid:UPnP_BThomeHub4A_2c3996abd64c::upnp:rootdevice 
 


</description>
          </result>
          <result id="8fbde451-1886-40a5-8be6-594c2702d075">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="0">
              <name/>
              <family/>
              <cvss_base/>
              <risk_factor/>
              <cve/>
              <bid/>
              <tags/>
              <cert/>
              <xref/>
            </nvt>
            <threat>Log</threat>
            <description>Open port.</description>
          </result>
          <result id="61143214-6b65-446e-871b-4594b5e7aa39">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10267">
              <name>SSH Server type and version</name>
              <family>Product detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|detection=remote probe|summary=This detects the SSH Server's type and version by connecting to the server
and processing the buffer received.
This information gives potential attackers additional information about the
system they are attacking. Versions and Types should be omitted
where possible.|solution=Apply filtering to disallow access to this port from untrusted hosts</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>Detected SSH server version: SSH-1.99-OpenSSH_4.2
Remote SSH supported authentication: (not available)
Remote SSH banner: 
(not available)

CPE: cpe:/a:openbsd:openssh:4.2

Concluded from remote connection attempt with credentials:
  Login: OpenVAS
  Password: OpenVAS

</description>
          </result>
          <result id="3bac2aac-0c1d-4654-9ef7-1f0fb11bdd97">
            <subnet>192.168.1.254</subnet>
            <host>192.168.1.254</host>
            <port>ssh (22/tcp)</port>
            <nvt oid="1.3.6.1.4.1.25623.1.0.10330">
              <name>Services</name>
              <family>Service detection</family>
              <cvss_base>0.0</cvss_base>
              <risk_factor>None</risk_factor>
              <cve>NOCVE</cve>
              <bid>NOBID</bid>
              <tags>cvss_base_vector=AV:N/AC:L/Au:N/C:N/I:N/A:N|summary=This plugin attempts to guess which
service is running on the remote ports. For instance,
it searches for a web server which could listen on
another port than 80 and set the results in the plugins
knowledge base.</tags>
              <cert/>
              <xref>NOXREF</xref>
            </nvt>
            <threat>Log</threat>
            <description>An ssh server is running on this port
</description>
          </result>
        </host>
      </content>
    </report>
  </reports>
</asset-report-collection>
</report></get_reports_response>
